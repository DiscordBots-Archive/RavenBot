{"meta":{"generator":"0.2.0","format":19,"date":1555003409517},"custom":{"client":{"name":"client","files":{"Client":{"name":"Client","type":"js","content":"const { AkairoClient, CommandHandler, InhibitorHandler, ListenerHandler } = require('discord-akairo');\r\nconst { Counter, collectDefaultMetrics, register } = require('prom-client');\r\nconst SettingsProvider = require('../struct/SettingsProviders');\r\nconst MuteScheduler = require('../struct/MuteScheduler');\r\nconst ReactionRole = require('../models/ReactionRoles');\r\nconst { Client: Lavaqueue } = require('lavaqueue');\r\nconst { Collection, Util } = require('discord.js');\r\nconst Database = require('../struct/Database');\r\nconst Playlist = require('../models/Playlist');\r\nconst Setting = require('../models/settings');\r\nconst { createServer } = require('http');\r\nconst Case = require('../models/Case');\r\nconst { Rejects } = require('rejects');\r\nconst Tags = require('../models/Tags');\r\nconst { Op } = require('sequelize');\r\nconst { parse } = require('url');\r\nconst path = require('path');\r\n\r\nclass Client extends AkairoClient {\r\n\tconstructor(config) {\r\n\t\tsuper({ ownerID: config.owner }, {\r\n\t\t\tmessageCacheMaxSize: 50,\r\n\t\t\tmessageCacheLifetime: 300,\r\n\t\t\tmessageSweepInterval: 900,\r\n\t\t\tdisableEveryone: true,\r\n\t\t\tdisabledEvents: ['TYPING_START']\r\n\t\t});\r\n\r\n\t\tthis.commandHandler = new CommandHandler(this, {\r\n\t\t\tdirectory: path.join(__dirname, '..', 'commands'),\r\n\t\t\taliasReplacement: /-/g,\r\n\t\t\tprefix: message => this.settings.get(message.guild, 'prefix', '*'),\r\n\t\t\tallowMention: true,\r\n\t\t\tfetchMembers: true,\r\n\t\t\tcommandUtil: true,\r\n\t\t\tcommandUtilLifetime: 3e5,\r\n\t\t\tcommandUtilSweepInterval: 9e5,\r\n\t\t\thandleEdits: true,\r\n\t\t\tdefaultCooldown: 3000,\r\n\t\t\tdefaultPrompt: {\r\n\t\t\t\tmodifyStart: (text, msg) => text && `${msg.author} **::** ${text}\\ntype \\`cancel\\` to cancel this command.`,\r\n\t\t\t\tmodifyRetry: (text, msg) => text && `${msg.author} **::** ${text}\\ntype \\`cancel\\` to cancel this command.`,\r\n\t\t\t\ttimeout: msg => `${msg.author} **::** Time ran out, command has been cancelled.`,\r\n\t\t\t\tended: msg => `${msg.author} **::** Too many retries, command has been cancelled.`,\r\n\t\t\t\tcancel: msg => `${msg.author} **::** Command has been cancelled.`,\r\n\t\t\t\tretries: 2,\r\n\t\t\t\ttime: 30000\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.inhibitorHandler = new InhibitorHandler(this, { directory: path.join(__dirname, '..', 'inhibitors') });\r\n\t\tthis.listenerHandler = new ListenerHandler(this, { directory: path.join(__dirname, '..', 'listeners') });\r\n\r\n\t\tthis.prometheus = {\r\n            messagesCounter: new Counter({ name: 'raven_messages_total', help: 'Total number of messages have seen' }),\r\n            commandCounter: new Counter({ name: 'raven_commands_total', help: 'Total number of commands used' }),\r\n            collectDefaultMetrics,\r\n            register\r\n        };\r\n        this.prometheus.collectDefaultMetrics({ prefix: 'raven_', timeout: 30000 });\r\n\r\n\t\tthis.music = new Lavaqueue({\r\n\t\t\tuserID: process.env.ID,\r\n\t\t\tpassword: process.env.PASS,\r\n\t\t\thosts: {\r\n\t\t\t\trest: process.env.REST,\r\n\t\t\t\tws: process.env.WS,\r\n\t\t\t\tredis: {\r\n\t\t\t\t\tport: process.env.PORT,\r\n\t\t\t\t\thost: process.env.HOST,\r\n\t\t\t\t\tdb: process.env.DB\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tsend: async (guild, packet) => {\r\n\t\t\t\tconst shardGuild = this.guilds.get(guild);\r\n\t\t\t\tif (shardGuild) return shardGuild.shard.send(packet);\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.config = config;\r\n\t\tthis.storage = new Rejects(this.music.queues.redis);\r\n\t\tthis.settings = new SettingsProvider(Setting);\r\n\t\tthis.muteScheduler = new MuteScheduler(this, Case);\r\n\t\tthis.starboards = new Collection();\r\n\t\tthis.cached = new Set();\r\n\r\n\t\tthis.commandHandler.resolver.addType('tag', async (phrase, message) => {\r\n\t\t\tif (!phrase) return null;\r\n\t\t\tphrase = Util.cleanContent(phrase.toLowerCase(), message);\r\n\t\t\tconst tag = await Tags.findOne({ where: { name: phrase, guildID: message.guild.id }});\r\n\r\n\t\t\treturn tag || null;\r\n\t\t});\r\n\r\n\t\tthis.commandHandler.resolver.addType('existingTag', async (phrase, message) => {\r\n\t\t\tif (!phrase) return null;\r\n\t\t\tphrase = Util.cleanContent(phrase.toLowerCase(), message);\r\n\t\t\tconst tag = await Tags.findOne({ where: { guildID: message.guild.id,\r\n\t\t\t\t[Op.or]: [\r\n\t\t\t\t\t{ name: phrase },\r\n\t\t\t\t\t{ aliases: { [Op.contains]: [phrase] } }\r\n\t\t\t\t]\r\n\t\t\t}});\r\n\r\n\t\t\treturn tag ? null : phrase;\r\n\t\t});\r\n\r\n\t\tthis.commandHandler.resolver.addType('tagContent', (phrase, message) => {\r\n\t\t\tif (!phrase) phrase = '';\r\n\t\t\tphrase = Util.cleanContent(phrase, message);\r\n\t\t\tif (message.attachments.first()) phrase += `\\n${message.attachments.first().url}`;\r\n\r\n\t\t\treturn phrase || null;\r\n\t\t});\r\n\r\n\t\tthis.commandHandler.resolver.addType('reactionRole', async (phrase, message) => {\r\n\t\t\tif (!phrase) return null;\r\n\t\t\tconst msg = await ReactionRole.findOne({ where: { guildID: message.guild.id, messageID: phrase }});\r\n\t\t\treturn msg || null;\r\n\t\t})\r\n\r\n\t\tthis.commandHandler.resolver.addType('playlist', async (phrase, message) => {\r\n\t\t\tif (!phrase) return null;\r\n\t\t\tphrase = Util.cleanContent(phrase.toLowerCase(), message);\r\n\t\t\tconst playlist = await Playlist.findOne({ where: { name: phrase, guildID: message.guild.id }});\r\n\r\n\t\t\treturn playlist || null;\r\n\t\t});\r\n\t\t\r\n\t\tthis.commandHandler.resolver.addType('existingPlaylist', async (phrase, message) => {\r\n\t\t\tif (!phrase) return null;\r\n\t\t\tphrase = Util.cleanContent(phrase.toLowerCase(), message);\r\n\t\t\tconst playlist = await Playlist.findOne({ where: { name: phrase, guildID: message.guild.id }});\r\n\r\n\t\t\treturn playlist ? null : phrase;\r\n\t\t});\r\n\r\n\t\tthis.setup();\r\n\r\n\t\t/*\r\n\t\tsetInterval(() => {\r\n\t\t\tfor (const guild of this.guilds.values()) {\r\n\t\t\t\tguild.presences.clear();\r\n\t\t\t}\r\n\t\t}, 900);\r\n\t\t*/\r\n\t}\r\n\r\n\tasync setup() {\r\n\t\tthis.commandHandler.useInhibitorHandler(this.inhibitorHandler);\r\n\t\tthis.commandHandler.useListenerHandler(this.listenerHandler);\r\n\t\tthis.listenerHandler.setEmitters({\r\n\t\t\tcommandHandler: this.commandHandler,\r\n\t\t\tinhibitorHandler: this.inhibitorHandler,\r\n\t\t\tlistenerHandler: this.listenerHandler\r\n\t\t});\r\n\r\n\t\tthis.commandHandler.loadAll();\r\n\t\tthis.inhibitorHandler.loadAll();\r\n\t\tthis.listenerHandler.loadAll();\r\n\t}\r\n\r\n\tasync metrics() {\r\n\t\tcreateServer((req, res) => {\r\n\t\t\tif (parse(req.url).pathname === '/metrics') {\r\n\t\t\t\tres.writeHead(200, { 'Content-Type': this.prometheus.register.contentType });\r\n\t\t\t\tres.write(this.prometheus.register.metrics());\r\n\t\t\t};\r\n\t\t\tres.end();\r\n\t\t}).listen(8080);\r\n    };\r\n\r\n\tasync start() {\r\n\t\tawait Database.authenticate();\r\n\t\tawait this.settings.init();\r\n\t\treturn this.login(this.config.token);\r\n\t}\r\n}\r\n\r\nmodule.exports = Client;\r\n","path":"src/client/Client.js"}}},"commands":{"name":"commands","files":{"docs":{"name":"DOCS","type":"js","content":"const { Command } = require('discord-akairo');\r\nconst fetch =  require('node-fetch');\r\nconst qs = require('querystring');\r\n\r\nconst SOURCES = ['stable', 'master', 'rpc', 'commando', 'akairo', 'akairo-master'];\r\n\r\nclass DocsCommand extends Command {\r\n    constructor() {\r\n        super('docs', {\r\n            aliases: ['docs'],\r\n            category: 'docs',\r\n            clientPermissions: ['EMBED_LINKS'],\r\n            args: [\r\n                {\r\n                    id: 'query',\r\n                    match: 'rest',\r\n                    type: 'lowercase',\r\n                    prompt: {\r\n                        start: 'what would you like to search?'\r\n                    }\r\n                },\r\n                {\r\n                    id: 'force',\r\n                    match: 'flag',\r\n                    flag: ['--force', '-f']\r\n                }\r\n            ],\r\n            description: {\r\n                content: 'Searches discord.js documentation.',\r\n                usage: '<query>',\r\n                examples: ['TextChannel', 'Client', 'ClientUser#setActivity master']\r\n            }\r\n        })\r\n    }\r\n\r\n    async exec(message, { query, force }) {\r\n\r\n        query = query.split(' ');\r\n\t\t/*let project = 'main';\r\n\t\tlet branch = ['stable', 'master', 'rpc', 'commando'].includes(query.slice(-1)[0]) ? query.pop() : 'stable';\r\n\t\tif (['rpc', 'commando'].includes(branch)) {\r\n\t\t\tproject = branch;\r\n\t\t\tbranch = 'master';\r\n\t\t}\r\n\t\tconst queryString = qs.stringify({ q: query.join(' '), force });\r\n        const res = await fetch(`https://djsdocs.sorta.moe/${project}/${branch}/embed?${queryString}`);*/\r\n        const source = SOURCES.includes(query.slice(-1)[0]) ? query.pop() : 'stable';\r\n\t\tconst queryString = qs.stringify({ src: source, q: query.join(' '), force });\r\n        const res = await fetch(`https://djsdocs.sorta.moe/v2/embed?${queryString}`);\r\n\t\tconst data = await res.json();\r\n\t\tif (!data) {\r\n\t\t\treturn message.util.reply(\"I couldn't find the requested information.\");\r\n        }\r\n        const newData = JSON.stringify(data).replace(/<p>|<\\/p>|<br>|<\\/br>/g, '');\r\n        const oldEmbed = JSON.parse(newData);\r\n        const embed = this.client.util.embed(oldEmbed)//.setColor(0x8387db).setDescription(data.description.replace(/<p>(.+)<\\/p>/g, '$1'))\r\n\t\tif (message.channel.type === 'dm' || !(message.channel).permissionsFor(message.guild.me).has(['ADD_REACTIONS', 'MANAGE_MESSAGES'], false)) {\r\n\t\t\treturn message.util.send({ embed });\r\n\t\t}\r\n\t\tconst msg = await message.util.send({ embed });\r\n\t\tmsg.react('🗑');\r\n\t\tlet react;\r\n\t\ttry {\r\n\t\t\treact = await msg.awaitReactions(\r\n\t\t\t\t(reaction, user) => reaction.emoji.name === '🗑' && user.id === message.author.id,\r\n\t\t\t\t{ max: 1, time: 30000, errors: ['time'] }\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tmsg.reactions.removeAll();\r\n\r\n\t\t\treturn message;\r\n\t\t}\r\n\t\treact.first().message.delete();\r\n\r\n\t\treturn message;\r\n    }\r\n}\r\n\r\nmodule.exports = DocsCommand;","path":"src/commands/docs/docs.js"},"npm":{"name":"NPM","type":"js","content":"const { Command } = require('discord-akairo');\r\nconst { MessageEmbed } = require('discord.js');\r\nconst fetch = require('node-fetch');\r\nconst moment = require('moment'); require('moment-duration-format');\r\n\r\nclass NPMCommand extends Command {\r\n\tconstructor() {\r\n\t\tsuper('npm', {\r\n\t\t\taliases: ['npm', 'npm-package'],\r\n\t\t\tcategory: 'docs',\r\n\t\t\tclientPermissions: ['EMBED_LINKS'],\r\n\t\t\targs: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'pkg',\r\n\t\t\t\t\tprompt: {\r\n\t\t\t\t\t\tstart: message => `${message.author}, what would you like to search for?`\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmatch: 'content',\r\n\t\t\t\t\ttype: pkg => pkg ? encodeURIComponent(pkg.replace(/ /g, '-')) : null\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tdescription: {\r\n\t\t\t\tcontent: 'Responds with information on an NPM package.',\r\n\t\t\t\tusage: '<query>',\r\n\t\t\t\texamples: ['discord.js', 'discord-akairo', 'node-fetch']\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync exec(message, { pkg }) {\r\n\r\n\t\tconst res = await fetch(`https://registry.npmjs.com/${pkg}`);\r\n\t\tif (res.status === 404) {\r\n\t\t\treturn message.util.reply(\"I couldn't find the requested information.\");\r\n\t\t}\r\n\t\tconst body = await res.json();\r\n\t\tif (body.time === undefined) {\r\n\t\t\treturn message.util.reply('commander of this package decided to unpublish it.');\r\n\t\t}\r\n\t\tconst version = body.versions[body['dist-tags'].latest];\r\n\t\tconst maintainers = this._trimArray(body.maintainers.map(user => user.name).join(', '));\r\n\t\tconst dependencies = version.dependencies ? this._trimArray(Object.keys(version.dependencies)) : '';\r\n\t\tconst embed = new MessageEmbed()\r\n\t\t.setColor(0xCB0000)\r\n\t\t.setAuthor('NPM', 'https://i.imgur.com/ErKf5Y0.png', 'https://www.npmjs.com/')\r\n\t\t.setTitle(body.name)\r\n\t\t.setURL(`https://www.npmjs.com/package/${pkg}`)\r\n\t\t.setDescription(body.description || 'No description.')\r\n\t\t.addField('Version', body['dist-tags'].latest, true)\r\n\t\t.addField('License', body.license || 'None', true)\r\n\t\t.addField('Author', body.author ? body.author.name : '???', true)\r\n\t\t.addField('Creation Date', moment.utc(body.time.created).format('DD-MM-YYYY kk:mm:ss'), true)\r\n\t\t.addField('Modification Date', moment.utc(body.time.modified).format('DD-MM-YYYY kk:mm:ss'), true)\r\n\t\t.addField('Main File', version.main || 'index.js', true)\r\n\t\t.addField('Dependencies', dependencies && dependencies.length ? dependencies.join(', ') : 'None')\r\n\t\t.addField('Maintainers', maintainers);\r\n\r\n\t\tif (message.channel.type === 'dm' || !(message.channel).permissionsFor(message.guild.me).has(['ADD_REACTIONS', 'MANAGE_MESSAGES'], false)) {\r\n\t\t\treturn message.util.send({ embed });\r\n\t\t}\r\n\t\tconst msg = await message.util.send({ embed });\r\n\t\tmsg.react('🗑');\r\n\t\tlet react;\r\n\t\ttry {\r\n\t\t\treact = await msg.awaitReactions(\r\n\t\t\t\t(reaction, user) => reaction.emoji.name === '🗑' && user.id === message.author.id,\r\n\t\t\t\t{ max: 1, time: 30000, errors: ['time'] }\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tmsg.reactions.removeAll();\r\n\r\n\t\t\treturn message;\r\n\t\t}\r\n\t\treact.first().message.delete();\r\n\r\n\t\treturn message;\r\n\t}\r\n\r\n\t_trimArray(arr) {\r\n\t\tif (arr.length > 10) {\r\n\t\t\tconst len = arr.length - 10;\r\n\t\t\tarr = arr.slice(0, 10);\r\n\t\t}\r\n\t\treturn arr;\r\n\t}\r\n}\r\n\r\nmodule.exports = NPMCommand;","path":"src/commands/docs/npm.js"},"mdn":{"name":"MDN","type":"js","content":"const { Command } = require('discord-akairo');\r\nconst { MessageEmbed } = require('discord.js');\r\nconst fetch = require('node-fetch');\r\nconst qs = require('querystring');\r\nconst Turndown = require('turndown'); // eslint:disable-line\r\n\r\nclass MDNCommand extends Command {\r\n\tconstructor() {\r\n\t\tsuper('mdn', {\r\n\t\t\taliases: ['mdn', 'mozilla-developer-network'],\r\n\t\t\tcategory: 'docs',\r\n\t\t\tregex: /^(?:mdn,) (.+)/i,\r\n\t\t\tclientPermissions: ['EMBED_LINKS'],\r\n\t\t\targs: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'query',\r\n\t\t\t\t\tprompt: {\r\n\t\t\t\t\t\tstart: (message) => `${message.author}, what would you like to search for?`\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmatch: 'content',\r\n\t\t\t\t\ttype: query => query ? query.replace(/#/g, '.prototype.') : null\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tdescription: {\r\n\t\t\t\tcontent: 'Searches MDN for your query.',\r\n\t\t\t\tusage: '<query>',\r\n\t\t\t\texamples: ['Map', 'Map#get', 'Map.set']\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync exec(message, { query, match }) {\r\n\t\tif (!query && match) query = match[1];\r\n\t\tconst queryString = qs.stringify({ q: query });\r\n\t\tconst res = await fetch(`https://mdn.pleb.xyz/search?${queryString}`);\r\n\t\tconst body = await res.json();\r\n\t\tif (!body.URL || !body.Title || !body.Summary) {\r\n\t\t\treturn message.util.reply(\"I couldn't find the requested information.\");\r\n\t\t}\r\n\t\tconst turndown = new Turndown();\r\n\t\tturndown.addRule('hyperlink', {\r\n\t\t\tfilter: 'a',\r\n\t\t\treplacement: (text, node) => `[${text}](https://developer.mozilla.org${node.href})`\r\n\t\t});\r\n\t\tconst summary = body.Summary.replace(/<code><strong>(.+)<\\/strong><\\/code>/g, '<strong><code>$1<\\/code><\\/strong>');\r\n\r\n\t\tconst embed = new MessageEmbed()\r\n\t\t.setColor(0x066FAD)\r\n\t\t.setAuthor('MDN', 'https://i.imgur.com/DFGXabG.png', 'https://developer.mozilla.org/')\r\n\t\t.setURL(`https://developer.mozilla.org${body.URL}`)\r\n\t\t.setTitle(body.Title)\r\n\t\t.setDescription(turndown.turndown(summary));\r\n\r\n\t\tif (message.channel.type === 'dm' || !(message.channel).permissionsFor(message.guild.me).has(['ADD_REACTIONS', 'MANAGE_MESSAGES'], false)) {\r\n\t\t\treturn message.util.send({ embed });\r\n\t\t}\r\n\t\tconst msg = await message.util.send({ embed });\r\n\t\tmsg.react('🗑');\r\n\t\tlet react;\r\n\t\ttry {\r\n\t\t\treact = await msg.awaitReactions(\r\n\t\t\t\t(reaction, user) => reaction.emoji.name === '🗑' && user.id === message.author.id,\r\n\t\t\t\t{ max: 1, time: 30000, errors: ['time'] }\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tmsg.reactions.removeAll();\r\n\r\n\t\t\treturn message;\r\n\t\t}\r\n\t\treact.first().message.delete();\r\n\r\n\t\treturn message;\r\n\t}\r\n}\r\n\r\nmodule.exports = MDNCommand;","path":"src/commands/docs/mdn.js"},"about":{"name":"GUIDE","type":"js","content":"const { Command } = require('discord-akairo');\r\nconst Akairo = require('discord-akairo');\r\nconst Discord = require('discord.js');\r\nconst fs = require('fs');\r\n\r\nclass AboutCommand extends Command {\r\n\tconstructor() {\r\n\t\tsuper('about', {\r\n\t\t\taliases: ['about', 'info'],\r\n\t\t\tcategory: 'general',\r\n\t\t\tclientPermissions: ['EMBED_LINKS'],\r\n\t\t\tdescription: { content: 'Shows information about the bot.' }\r\n\t\t});\r\n\t}\r\n\r\n\texec(message) {\r\n\t\tconst prefix = this.handler.prefix(message);\r\n\t\tconst owner = this.client.users.get(this.client.ownerID);\r\n\t\tconst raven = fs.readFileSync('file.txt', 'utf8');\r\n\r\n\t\tconst embed = this.client.util.embed()\r\n\t\t\t.setColor(0x8387db)\r\n\t\t\t.setTitle(`About ${this.client.user.username}`)\r\n\t\t\t.addField('Dev', `**${this.client.user.username}** is developed by **[${owner.tag}](https://almostsuvajit.xyz)**`)\r\n\t\t\t.addField('Core', `[Discord.js](https://discord.js.org) (${Discord.version}) library and [Akairo](https://1computer1.github.io/discord-akairo) (${Akairo.version.replace(/beta.1/g, 'dev')}) framework`)\r\n\t\t\t.addField('Music', `[Lavalink](https://github.com/lavalibs/lavalink.js) audio player, along with [Lavaqueue](https://github.com/lavalibs/lavaqueue), backed by [Redis](https://github.com/MicrosoftArchive/redis) instance`)\r\n\t\t\t.addField('Database', `[PostgreSQL](https://www.postgresql.org/) database, along with [Sequelize](http://docs.sequelizejs.com/) [Node.js](https://nodejs.org/en/) ORM`)\r\n\t\t\t.addField('Host', [\r\n\t\t\t\t`[Amazon EC2](https://aws.amazon.com/ec2/)`,\r\n\t\t\t\t'```js',\r\n\t\t\t\t`${raven.toString()}`,\r\n\t\t\t\t'```'\r\n\t\t\t])\r\n\t\treturn message.util.send({ embed });\r\n\t}\r\n}\r\n\r\nmodule.exports = AboutCommand;\r\n","path":"src/commands/general/about.js"},"blacklist":{"name":"BLACKLIST","type":"js","content":"const { Command } = require('discord-akairo');\r\n\r\nclass BlacklistCommand extends Command {\r\n\tconstructor() {\r\n\t\tsuper('blacklist', {\r\n\t\t\taliases: ['blacklist', 'unblacklist'],\r\n\t\t\tcategory: 'general',\r\n\t\t\tchannel: 'guild',\r\n\t\t\tuserPermissions: ['MANAGE_GUILD'],\r\n\t\t\tquoted: false,\r\n\t\t\targs: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'member',\r\n\t\t\t\t\tmatch: 'content',\r\n\t\t\t\t\ttype: 'member',\r\n\t\t\t\t\tprompt: {\r\n\t\t\t\t\t\tstart: 'Which user do you want to blacklist or unblacklist?',\r\n\t\t\t\t\t\tretry: 'Please provide a valid user.'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tdescription: {\r\n\t\t\t\tcontent: 'Blacklists or unblacklists someone from using stars and giving reputation.',\r\n\t\t\t\tusage: '<user>',\r\n\t\t\t\texamples: ['@BadPerson', 'someone#1234']\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync exec(message, { member }) {\r\n\t\tconst blacklist = this.client.settings.get(message.guild, 'blacklist', []);\r\n\r\n\t\tif (blacklist.includes(member.id)) {\r\n\t\t\tconst index = blacklist.indexOf(member.id);\r\n\t\t\tblacklist.splice(index, 1);\r\n\t\t\tawait this.client.settings.set(message.guild, 'blacklist', blacklist);\r\n\r\n\t\t\treturn message.util.send(`**${member.user.tag}** has been removed from the blacklist.`);\r\n\t\t}\r\n\t\tblacklist.push(member.id);\r\n\t\tawait this.client.settings.set(message.guild, 'blacklist', blacklist);\r\n\r\n\t\treturn message.util.send(`**${member.user.tag}** has been blacklisted from using the starboard and giving reputation on this server.`);\r\n\t}\r\n}\r\n\r\nmodule.exports = BlacklistCommand;","path":"src/commands/general/blacklist.js"}}}},"classes":[],"interfaces":[],"typedefs":[],"externals":[]}